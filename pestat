#!/bin/sh

# Name: pestat
# ------------
# Torque resource manager utility script: Print a 1-line summary of jobs on each node.
# Usage: Run "pestat -h" for help information.
#
# Colors may be used in the output (also controlled by the PESTAT_COLOR environment variable).
# The printout at the end may be customized if needed.
#
# Author: Ole.H.Nielsen@fysik.dtu.dk
# URL: ftp://ftp.fysik.dtu.dk/pub/Torque/pestat
VERSION="pestat version 2.13.  Date: 6 February 2013"

# Locations of command and directories
PBSNODES=/opt/pbs/default/bin/pbsnodes
QSTAT=/opt/pbs/default/bin/qstat
AWK=/bin/awk
SORT=/bin/sort

# Node names have different lengths at different sites,
# so configure this printf string to accomodate your longest node name + 1 (>= 5 chars)
NODENAMEFORMAT="%-15s"

# The pestat status directory (must be secure location for root)
PESTAT_LIBDIR=/var/lib/pestat
if test ! -d $PESTAT_LIBDIR -a "$USER" = "root"
then
	mkdir -v $PESTAT_LIBDIR
fi

# Print usernames of jobs too?
PRINTUSER=0

# Queues and colours they should be printed with
QUEUES=("short" "day" "week" "month" "long")
COLOURS=("\033[1;32m" "\033[1;37m" "\033[1;33m" "\033[1;36m" "\033[1;34m")

# Command usage:
function usage()
{
cat <<EOF
Usage: $0 [-a] [-f] [-c|-n] [-d] [-V] [-u username|-g groupname] [-j jobs] [-h]
where:
	-a: Print owner usernames of jobs too
	-f: Listing only nodes that are flagged by \*
	-d: Listing also nodes that are down
	-c/-n: Color/no color output
	-u username: Print only user <username> (do not use with the -g flag)
	-g groupname: Print only users in group <groupname>
	-j jobs: List only nodes with at least <jobs> running jobs 
	-h: Print this help information
	-V: Version information
EOF
}

#
# Default parameter values
#
# Omit down nodes from the flagged list because we do not wish to see them
# (Use "pbsnodes -l" to list down nodes).
listdownnodes=0

# List only nodes with >= minjobs running jobs (default: minjobs=0)
# This is useful for selecting those nodes that run multiple jobs.
minjobs=0

# Colored output by default
colors=1

# Check user environment variable PESTAT_COLOR for color
if test "$PESTAT_COLOR" = "0"
then
	colors=0
fi

# Check if output is NOT a terminal: Turn colors off (can be overruled by "-c" flag).
FD=1	# File Descriptor no. 1 = stdout
if test ! -t $FD
then
	colors=0
fi

#
# Process command arguments
#
listflagged=0
while getopts "afdcnVu:g:j:h" options; do
	case $options in
		a ) 	PRINTUSER=1
			# Printing owner of each job
			;;
		f ) 	listflagged=1
			echo Listing only nodes that are flagged by \*
			;;
		d ) 	listdownnodes=1
			# Listing also down nodes
			;;
		c ) 	colors=1
			# Force the use of colors in output
			;;
		n ) 	colors=0
			# Do not use colors in output
			;;
		u ) 	username=$OPTARG
			echo Select only user $username
			;;
		g ) 	groupname=$OPTARG
			echo Select only users in group $groupname
			;;
		j ) 	minjobs=$OPTARG
			echo List only nodes with at least $minjobs running jobs
			;;
		V ) echo $VERSION
			exit 0;;
		h|? ) usage
			exit 1;;
		* ) usage
			exit 1;;
	esac
done

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
	echo ERROR: Too many command line arguments: $*
	usage
	exit 1
fi

if test -n "$username" -a -n "$groupname"
then
	echo ERROR: Do not select both username and groupname
	usage
	exit 1
fi

#
# Heading for printout showing:
#
# node:		Node hostname
# state:	Node state
# cpu:		Total and reserved CPUs
# memory:	Total and reserved memory
# jobids/users:	Jobids and corresponding usernames of Torque jobs on this node

#
# Show the Torque node status and parse the results
#
$PBSNODES -a | $AWK -v listflagged=$listflagged -v listdownnodes=$listdownnodes \
	-v colors=$colors -v username=$username -v groupname=$groupname -v minjobs=$minjobs \
	-v NODENAMEFORMAT=$NODENAMEFORMAT -v QUEUES="${QUEUES[*]}" -v COLOURS="${COLOURS[*]}" \
	-v QSTAT=$QSTAT -v PRINTUSER=$PRINTUSER '
BEGIN {
	# Define terminal colors for the output if requested
	if (colors != 0) {
		# See http://en.wikipedia.org/wiki/ANSI_escape_code#Colors
		RED="\033[1;31m"
		GREEN="\033[1;32m"
		NORMAL="\033[0m"
		DARK="\033[0;37m"

		# Build associative array of queue colours
		split(QUEUES,q1," ")
		split(COLOURS,q2," ")
		if ((length(q1) > 0) && (length(q1) == length(q2))) {
			printf "Queues: "
			for (i = 0; i < length(q1); i++) {
				QUEUECOLOUR[q1[i]] = q2[i]
				printf q2[i] q1[i] " "
			}
			print NORMAL
		}
	}

	# Get the list of jobids versus usernames from qstat
	QSTAT = QSTAT " -w"			# Append -r flag (running jobs) to qstat.
	while ((QSTAT | getline) > 0) {		# Parse lines from qstat -r
		if (++line>5) {			# Skip first 5 header lines
			split($1,b,".")		# Jobid is b[1]
			jobuser[b[1]] = $2	# Username of this jobid
			jobqueue[b[1]] = $3	# Queue of this jobid
		}
	}
	close(QSTAT)

	if (username != "") {
		userselect=1			# We select only this username
		userfound=0
		# Get the list of user full names from passwd lines
		while ("getent passwd "username | getline ) {
			split($0,b,":")         # Split password line into fields
			if (username == b[1]) userfound=1
		}
		if (userfound != 1) {
			print RED "ERROR: No such username:" NORMAL, username
			exit 1
		}
	} else if (groupname != "") {
		groupselect=1			# We have to select users in this groupname
		groupfound=0
		# Get the list of group names
		while ("getent group "groupname | getline ) {
			split($0,b,":")					# Split group line into fields
			group[b[3]] = b[1]				# Group name b[1] of this GID (b[3])
			if (groupname == b[1]) {
				groupfound=1
				split(b[4],c,",")			# Split group members into array
				for (x in c) {
					gidname[c[x]] = group[b[3]]	# Assign GID to username
				}
			}
		}
		if (groupfound != 1) {
			print RED "ERROR: No such groupname:" NORMAL, groupname
			exit 1
		}
	}

	# Print a header line
	printf(NODENAMEFORMAT, "Node")
	print " state    cpu        memory   jobids/users"
	printf(NODENAMEFORMAT, "----")
	print "        tot used    tot used"
}
#
# Parse the output of pbsnodes
#
NF==1 {	node=$1				# 1st line is nodename
	nodename[node] = node		# Node name
	getline				# Get the next input line
	numtasks[node] = 0              # Number of tasks started by Torque on the node
	listnode=0			# Set to > 0 if this node gets flagged
	userusesnode=0			# If this node is used by the selected user 
	groupusesnode=0			# If this node is used by a user in the selected group
	delete prevjobid
	prevjobid[-1]=0
	uniquejobs=0
	while (NF >= 3) {		# Read a number of non-blank lines
		if ($1 == "state") {
			if ($3 == "job-exclusive")			state[node] = "excl"
			else if ($3 == "job-exclusive,busy")		state[node] = "busy"
			else if ($3 == "job-busy")			state[node] = "busy"
			else if ($3 == "free")				state[node] = "free"
			else if ($3 == "offline")			state[node] = "offl"
			else if ($3 == "offline,job-exclusive")		state[node] = "offl"
			else if ($3 == "offline,job-exclusive,busy")	state[node] = "offl"
			else if ($3 == "offline,job-busy")		state[node] = "offl"
			else if ($3 == "down")				state[node] = "down"
			else if ($3 == "down,offline")			state[node] = "down"
			else if ($3 == "down,job-exclusive")		state[node] = "down"
			else if ($3 == "down,offline,job-exclusive")	state[node] = "down"
			else if ($3 == "down,offline,busy")		state[node] = "down"
			else if ($3 == "down,offline,job-exclusive,busy")	state[node] = "down"
			else if ($3 == "UNKN")				state[node] = "UNKN"
			else if ($3 == "state-unknown,offline")		state[node] = "offl"
			else if ($3 == "state-unknown,down")		state[node] = "down"
			else if ($3 == "state-unknown,down,offline")	state[node] = "down"
			else state[node] = "UNKN"
		}
		else if ($1 == "resources_available.mem")		totmem[node] = $3
		else if ($1 == "resources_assigned.mem")		assmem[node] = $3
		else if ($1 == "resources_available.ncpus")		ncpus[node] = $3
		else if ($1 == "jobs") {
			numtasks[node] = NF - 2
			for (i=3; i <= NF; i++) {
				split($i, d, ".")
				if (d[1] in prevjobid) continue
				# Get jobid and username
				jobid = d[1]
				prevjobid[jobid] = 1
				uniquejobs++
				tjobid = jobid
				sub(/\[[0-9]+\]/, "[]", tjobid)
				user = jobuser[tjobid]
				# Case where the node pbs_mom has a (dead job) jobid unknown to pbs_server:
				if (length(user) == 0) {	# Flag non-existent username
					user="NONE*"
					if (jobid == tjobid)	# Array jobs take a while to show up, rather not mark as error
						usercolor=RED
					else
						usercolor=NORMAL
					listnode++
				} else {
					usercolor=QUEUECOLOUR[jobqueue[tjobid]]
				}
				if (PRINTUSER)
					# Append jobid and username to the job list
					jobiduserlist[node] = jobiduserlist[node] " " usercolor jobid " " DARK user NORMAL
				else
					# Append only jobid to the job list
					jobiduserlist[node] = jobiduserlist[node] " " usercolor jobid NORMAL
				jobidlist[node] = jobidlist[node] " " jobid
				# If this node is used by the selected user
				if (userselect==1 && user == username) userusesnode=1
				# If this node is used by a user in the selected group
				if (groupselect==1 && gidname[user] == groupname) groupusesnode=1
			}
		}
		getline			# Get the next input line
	}

	# Is this node used by the selected user? Otherwise skip printout.
	if (userselect==1 && userusesnode==0) next
	# Is this node used by a user in the selected group? Otherwise skip printout.
	if (groupselect==1 && groupusesnode==0) next
	# If this node runs less than minjobs jobs
	if (uniquejobs < minjobs) next
	# Listing of down nodes?
	if (listdownnodes == 0 && state[node] == "down") next

	# Print out values that we are interested in.  Flag unexpected values with a "*".

	# Flag nodes with status down, offline or unknown
	if (state[node] == "busy") {
		stateflag=" "
		statecolor=RED
		jobcolor=RED
	} else if (state[node] == "down" || state[node] == "offl" || state[node] == "UNKN") {
		stateflag="*"
		statecolor=RED
		jobcolor=NORMAL
		listnode++
	} else {
		stateflag=" "
		statecolor=GREEN
		jobcolor=GREEN
	}

	# Remove "kb" unit from memory sizes
	sub("kb", "", totmem[node])
	sub("kb", "", assmem[node])
	# Resident memory
	resi = ((assmem[node]+0)/(totmem[node]+1))*100
	if (resi > 50) {	# High memory usage
		resiflag="*"
		resicolor=RED
		pmemcolor=GREEN
		listnode++
	} else {
		resiflag=" "
		resicolor=NORMAL
		pmemcolor=NORMAL
	}

	# Print a 1-line list for this node
	if (!listflagged || listnode > 0) {
		printf (NODENAMEFORMAT, node)
		printf (" %s%s%1s%s", statecolor, state[node], stateflag, NORMAL)
		printf (" %s%4d%s", cpucolor, ncpus[node], NORMAL)
		printf (" %s%4d%1s%s", jobcolor, numtasks[node], jobflag, NORMAL)
		printf (" %4dG%s", totmem[node]/1024/1024, NORMAL)
		printf (" %s%3d%%%s", resicolor, resi, NORMAL)
		printf (" %s\n", jobiduserlist[node])
	}
}' | (read -r; printf "%s\n" "$REPLY"; read -r; printf "%s\n" "$REPLY"; read -r; printf "%s\n" "$REPLY"; $SORT)
